@model IEnumerable<WebTracNghiemTiengAnhTHPT.Models.CauHoi>
@using System.Linq
@{
    ViewBag.Title = "ChiTietDeThi";
    Layout = "~/Areas/admin/Views/Shared/_AdminLayout.cshtml";
    var groupedItems = Model.GroupBy(item => new { item.NhomCauHoi.MaNhom, item.NhomCauHoi.NoiDung });
    WebTracNghiemTiengAnhTHPT.Models.KyThi kyThi = (WebTracNghiemTiengAnhTHPT.Models.KyThi)ViewBag.KyThi;
    int totalQuestions = Model.Count();
    List<WebTracNghiemTiengAnhTHPT.Models.DangBai> dangBais = ViewBag.dangBais;
    var selectedClass = ViewBag.Currenclass as string;
    var selectedExamType = ViewBag.CurrenBoSach as string;
}

<style>
    #otherQuestionsTable {
        width: 100%;
        overflow-x: auto;
    }

        #otherQuestionsTable th, #otherQuestionsTable td {
            word-wrap: break-word;
        }
</style>
<script src="~/Scripts/tinymce/tinymce.min.js" referrerpolicy="origin"></script>

<!-- Place the following <script> and <textarea> tags your HTML's <body> -->
<script>
    tinymce.init({
        selector: 'textarea',
        plugins: [
            // Core editing features
            'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
            // Your account includes a free trial of TinyMCE premium features
            // Try the most popular premium features until Nov 16, 2024:
            'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'advtemplate', 'ai', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown',
            // Early access to document converters
            'importword', 'exportword', 'exportpdf'
        ],
        toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
        tinycomments_mode: 'embedded',
        tinycomments_author: 'Author name',
        mergetags_list: [
            { value: 'First.Name', title: 'First Name' },
            { value: 'Email', title: 'Email' },
        ],
        ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
        exportpdf_converter_options: { 'format': 'Letter', 'margin_top': '1in', 'margin_right': '1in', 'margin_bottom': '1in', 'margin_left': '1in' },
        exportword_converter_options: { 'document': { 'size': 'Letter' } },
        importword_converter_options: { 'formatting': { 'styles': 'inline', 'resets': 'inline', 'defaults': 'inline', } },
    });
</script>


<div class="">
    <h2>Tên đề thi: @kyThi.TenKyThi </h2>
    <h3>Tổng số câu hỏi: @totalQuestions </h3>
    <h3>Số câu hỏi kiểm tra: @(kyThi.SoCauHoi.HasValue && kyThi.SoCauHoi.Value > 0 ? kyThi.SoCauHoi.Value : totalQuestions)</h3>
    <h3>Thời gian làm bài: @kyThi.ThoiGian phút</h3>
    <h3>Lớp: @selectedClass</h3>
    <h3>Bộ sách: @selectedExamType</h3>

    <div class="container">


        <div class="">


            @foreach (var group in groupedItems)
            {
                <div class="group-container" id="group-container-@group.Key.MaNhom">
                    <div class="bg-light "> @Html.Raw(HttpUtility.HtmlDecode(@group.Key.NoiDung))</div>
                    @foreach (var item in group)
                    {
                        <div class="item-container border p-3 mb-3">
                            <div class="field mb-2">
                                @Html.Raw(HttpUtility.HtmlDecode(item.NoiDung))
                            </div>

                            <!-- Answer choices with radio buttons -->
                            @foreach (var answer in new[] { "A", "B", "C", "D" })
                            {
                                var answerText = item.GetType().GetProperty($"DapAn{answer}").GetValue(item, null);

                                var isCorrect = item.DapAnChinhXac.Contains(answer);
                                var cssClass = isCorrect ? "correct-answer" : "incorrect-answer";

                                <label class="form-check-label w-100 my-1 border @cssClass" for="dapAn@answer_@item.MaCauHoi">
                                    <input class="form-check-input" type="radio" name="answer_@item.MaCauHoi" id="dapAn@answer_@item.MaCauHoi" value="@answer" disabled>
                                    <span class="answer-text">
                                        @answerText
                                    </span>

                                </label>
                            }

                            <!-- Report Error Icon -->
                            <div class="report-error-container">
                                <i class="fa fa-exclamation-circle text-danger report-icon"
                                   title="Report Error"
                                   onclick="openReportModal(@item.MaCauHoi); return false;">
                                </i>
                            </div>

                            <!-- Error Report Modal -->
                            <div class="modal fade" id="reportModal-@item.MaCauHoi" tabindex="-1" role="dialog">
                                <div class="modal-dialog" role="document">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">Report Error for Question @item.MaCauHoi</h5>
                                        </div>
                                        <div class="modal-body">
                                            <textarea id="errorMessage-@item.MaCauHoi" class="tinymce form-control" placeholder="Describe the error..."></textarea>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-secondary" onclick="closeReportModal(@item.MaCauHoi)">Close</button>
                                            <button type="button" class="btn btn-primary" onclick="submitErrorReport(@kyThi.MaDe, @item.MaCauHoi)">Submit Report</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </div>

                    }
                </div>

            }


        </div>

    </div>
    <style>
        .form-check-label {
            border-radius: 7px;
        }

        .correct-answer {
            border: 2px solid #28a745 !important; /* Viền màu xanh lá cây */
            border-radius: 5px; /* Tùy chỉnh bo góc */
            position: relative; /* Để căn chỉnh "Đáp án chính xác" */
            padding: 5px;
        }

        .correct-label {
            position: absolute;
            top: 5px;
            right: 10px; /* Góc phải */
            font-size: 12px; /* Kích thước nhỏ */
            color: #28a745; /* Màu xanh lá cây */
            font-weight: bold;
            background-color: #f0fff0; /* Nền nhạt hơn cho chữ */
            padding: 2px 6px;
            border-radius: 3px;
        }

        .incorrect-answer {
            border: 2px solid red !important; /* Viền đỏ */
            border-radius: 5px; /* Tùy chỉnh bo góc */
            padding: 5px;
        }
    </style>
    <!-- Ensure jQuery is included before your script -->

    <div class="">


        <button type="button" class="btn btn-sm @(kyThi.CongKhai == 2 ? "btn-success" : "btn-warning")" onclick="changeStatus('@kyThi.MaDe', @kyThi.CongKhai)">
            @(kyThi.CongKhai == 0 ? "Riêng" : (kyThi.CongKhai == 1? "Chờ duyệt công khai": "Đã công khai"))

        </button>
        <a href="@Url.Action("Index", "DuyetKyThi")" class="btn btn-secondary">Quay lại</a>

    </div>
</div>
<script>
      function changeStatus(Username, currentStatus) {
    var newStatus;
    var confirmationMessage;

    if (currentStatus == 1) {
        newStatus = 2;
        confirmationMessage = "Bạn có chắc chắn muốn chuyển đề thi sang công khai kỳ thi này không?";
    } else {
        newStatus = 1;
        confirmationMessage = "Bạn có chắc chắn muốn chuyển kỳ thi này về trạng thái riêng không?";
    }

    if (!confirm(confirmationMessage)) return;

    $.ajax({
        url: '@Url.Action("ChangeStatus", "DuyetKyThi")',
        type: 'POST',
        data: {
            made: Username,
            isActive: newStatus
        },
        success: function(response) {
            if (response.success) {
                var button = $("button[onclick*='" + Username + "']");
                if (newStatus == 1) {

                    button.removeClass('btn-danger').addClass('btn-success').text('Riêng').attr('onclick', `changeStatus('${Username}', 0)`);
                } else if (newStatus == 2) {

                    button.removeClass('btn-success').addClass('btn-warning').text('Chờ duyệt công khai').attr('onclick', `changeStatus('${Username}', 1)`);
                }
                window.location.reload();
            } else {
                alert("Đã có lỗi xảy ra khi thay đổi trạng thái.");
            }
        },
        error: function() {
            alert("Đã có lỗi xảy ra khi gửi yêu cầu.");
        }
    });
}

</script>

<script>
    function openReportModal(maCauHoi) {
        $(`#reportModal-${maCauHoi}`).modal('show');
    }

    function submitErrorReport(MaDe, MaCauHoi) {
        // Get the HTML content from TinyMCE
        var errorMessageHtml = tinymce.get(`errorMessage-${MaCauHoi}`).getContent();

        // Create a temporary element to parse the HTML and extract text
        var tempElement = document.createElement('div');
        tempElement.innerHTML = errorMessageHtml;
        var errorMessageText = tempElement.textContent || tempElement.innerText || '';

        MaDe = parseInt(MaDe);
        MaCauHoi = parseInt(MaCauHoi);
        if (!errorMessageText) {
            alert(`Vui lòng nhập nội dung báo lỗi.${errorMessageText}`);
            return;
        }
        //console.log(errorMessageText)
        console.log(MaDe, MaCauHoi, errorMessageText);
        $.ajax({
            type: "POST",
             url: '@Url.Action("ReportError", "DuyetKyThi")',

            data: {
                MaDe: MaDe,
                MaCauHoi: MaCauHoi,
                ErrorMessage: errorMessageText // Use the plain text here
            },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    $(`#reportModal-${MaCauHoi}`).modal('hide');
                } else {
                    alert(response.message);
                    console.log(response);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log("Status: " + textStatus);
                console.log("Error: " + errorThrown);
                console.log("Response: " + jqXHR.responseText);
                alert("Đã xảy ra lỗi khi gửi báo lỗi.");
            }
        });
    }

    function closeReportModal(maCauHoi) {
        $(`#reportModal-${maCauHoi}`).modal('hide');
    }

</script>
