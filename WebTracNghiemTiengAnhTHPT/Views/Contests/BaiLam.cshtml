@model WebTracNghiemTiengAnhTHPT.Models.KetQua

@{
    ViewBag.Title = "ChiTietKyThi";
    Layout = "~/Views/Shared/LayoutWeb.cshtml";
    var groupedItems = Model.ChiTietKetQuas
                         .GroupBy(item => new { item.CauHoi.MaNhom, item.CauHoi.NhomCauHoi.NoiDung });
    var isFirst = true;
    int made = ViewBag.MaDe;
    DateTime endTime = (DateTime)ViewBag.endTime;
}
<style>
    .selected-button {
        background-color: gray;
        color: white;
    }
</style>

<h2>ChiTietKyThi</h2>

<div class="container">
    <div class="row">
        <!-- Parent Div -->
        <form id="examForm" action="/Contests/Result?MaDe=@ViewBag.MaDe" method="post">
            <input type="hidden" name="flag" id="flag" value="0" />
            <input type="hidden" name="url" id="url" />
            <input type="hidden" id="endTime" value="@endTime" />
            <input type="hidden" id="maDe" value="@ViewBag.MaDe" />

            <div class="col-12 d-lg-flex flex-lg-row flex-column">
                <div class="col-lg-9 col-12 ">
                    <div>
                        @foreach (var group in groupedItems)
                        {
                            <button type="button" class="btn btn-light" onclick="showGroup('@group.Key.MaNhom')">
                                Phần thi @group.Key.MaNhom
                            </button>
                        }
                    </div>
                    @functions {
                        // Helper method to shuffle a list
                        public static List<T> ShuffleList<T>(List<T> list)
                        {
                            Random rng = new Random();
                            int n = list.Count;
                            while (n > 1)
                            {
                                n--;
                                int k = rng.Next(n + 1);
                                T value = list[k];
                                list[k] = list[n];
                                list[n] = value;
                            }
                            return list;
                        }
                    }
                    @foreach (var group in groupedItems)
                    {
                        <div class="group-container" id="group-container-@group.Key.MaNhom" style="display: @(isFirst ? "block" : "none");">
                            <div class="bg-light "> @Html.Raw(HttpUtility.HtmlDecode(@group.Key.NoiDung)) </div>
                            @foreach (var item in group)
                            {
                                // Create a list of answer choices
                                var choices = new List<(string Value, string Text)>
                                                        {
                                    ("A", item.CauHoi.DapAnA),
                                    ("B", item.CauHoi.DapAnB),
                                    ("C", item.CauHoi.DapAnC),
                                    ("D", item.CauHoi.DapAnD)
                                };

                                // Shuffle the choices
                                choices = ShuffleList(choices);

                                <div class="item-container border p-3 mb-3">
                                    <div class="field mb-2">
                                        @item.MaCauHoi : @Html.Raw(HttpUtility.HtmlDecode(item.CauHoi.NoiDung))
                                    </div>

                                    <!-- Render shuffled answer choices with radio buttons -->
                                    @foreach (var choice in choices)
                                    {
                                        <label class="form-check-label bg-info w-100 my-1 border-danger border-2" for=@($"dapAn{choice.Value}_{item.MaCauHoi}")>
                                            <span class="form-check mb-2">
                                                <input class="form-check-input"
                                                       type="radio" name="answer_@item.MaCauHoi" id=@($"dapAn{choice.Value}_{item.MaCauHoi}") value="@choice.Value"
                                                       @(item.DapAnChon == choice.Value ? "checked" : "") onchange="updateButtonColor('@item.MaCauHoi')">
                                                @choice.Text
                                            </span>
                                        </label>
                                    }

                                    <div class="field">
                                        <strong>DapAnChinhXac:</strong> @Html.DisplayFor(modelItem => item.CauHoi.DapAnChinhXac)
                                    </div>
                                </div>
                            }
                        </div>
                        isFirst = false;
                    }
                </div>
                <div class="col-lg-3 col-12 bg-light border border-primary rounded-3 p-4 mx-1 ">
                    <input onclick="ketthuc()" type="submit" value="Nộp bài" />
                    <div id="timer">90:00</div>
                    @foreach (var group in groupedItems)
                    {
                        <div class="group-container-right ">
                            <div class="bg-light ">Phần thi @group.Key.MaNhom</div>
                            @foreach (var item in group)
                            {
                                <button class="m-1" id="button-@item.MaCauHoi" onclick="showQuestion('@item.MaCauHoi')">@item.MaCauHoi</button>
                            }
                        </div>
                    }
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        initializeButtonColors();
        startTimer();
    });

    function showGroup(maNhom) {
        var groupContainers = document.querySelectorAll('.group-container');
        groupContainers.forEach(function (container) {
            container.style.display = 'none';
        });

        var selectedContainer = document.getElementById('group-container-' + maNhom);
        if (selectedContainer) {
            selectedContainer.style.display = 'block';
        }
    }

    function showQuestion(maCauHoi) {
        var questionElement = document.querySelector(`input[name="answer_${maCauHoi}"]`);
        if (questionElement) {
            var groupContainer = questionElement.closest('.group-container');
            if (groupContainer) {
                var groupContainers = document.querySelectorAll('.group-container');
                groupContainers.forEach(function (container) {
                    container.style.display = 'none';
                });
                groupContainer.style.display = 'block';
            }
            questionElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            questionElement.focus();
        }
    }

    function updateButtonColor(maCauHoi) {
        var buttons = document.querySelectorAll('.group-container-right button');
        buttons.forEach(function (button) {
            if (button.textContent.trim() == maCauHoi) {
                button.classList.add('selected-button');
            }
        });
    }

    function initializeButtonColors() {
        var radioButtons = document.querySelectorAll('.form-check-input');
        radioButtons.forEach(function (radioButton) {
            if (radioButton.checked) {
                updateButtonColor(radioButton.name.split('_')[1]);
            }
        });
    }

    let endTime = new Date(document.getElementById('endTime').value).getTime();
    var interval;
    function startTimer() {
        const timerDiv = document.getElementById('timer');

        interval = setInterval(() => {
            let now = new Date().getTime();
            let distance = endTime - now;

            if (distance <= 0) {
                clearInterval(interval);
                timerDiv.textContent = "00:00";
                ketthuc();
                return;
            }

            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);
            timerDiv.textContent = `Thời gian còn lại: ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }, 1000);
    }

    function ketthuc() {
        var t;
        var s = "Bạn có chắc chắn muốn nộp bài";
        if (endTime - new Date().getTime() > 0) t = confirm(s);

        if (t == true || endTime - new Date().getTime() <= 0) {
            clearInterval(interval);
            document.getElementById('nopbai').disabled = true;
            document.getElementById("examForm").submit();
        }
    }

    window.addEventListener('beforeunload', function (e) {
        document.getElementById('flag').value = '1';
        var currentUrl = window.location.href;
        document.getElementById('url').value = currentUrl;

        var formData = new FormData(document.getElementById('examForm'));
        navigator.sendBeacon('/Contests/Result?MaDe=' + document.getElementById('maDe').value, formData);

        e.returnValue = '';
    });

    window.addEventListener('unload', function (e) {
        document.getElementById('flag').value = '1';
        var currentUrl = window.location.href;
        document.getElementById('url').value = currentUrl;

        var formData = new FormData(document.getElementById('examForm'));
        navigator.sendBeacon('/Contests/Result?MaDe=' + document.getElementById('maDe').value, formData);

        e.returnValue = '';
    });

    document.getElementById('examForm').addEventListener('submit', function () {
        document.getElementById('flag').value = '0';
    });

</script>
@if (!string.IsNullOrEmpty(ViewBag.Message))
{
    <script>
        alert('@ViewBag.Message');
    </script>
    ViewBag.Message = null;
}