@model WebTracNghiemTiengAnhTHPT.Models.KetQua

@{
    ViewBag.Title = "ChiTietKyThi";
    Layout = "~/Views/Shared/LayoutWeb.cshtml";

    var groupedItems = Model.ChiTietKetQuas
        .GroupBy(item => new { item.CauHoi.MaNhom, item.CauHoi.NhomCauHoi.NoiDung });
    var isFirst = true;
    int made = ViewBag.MaDe;
    DateTime endTime = (DateTime)ViewBag.endTime;

    var myDictionary = new Dictionary<int, int>();
    int counter = 1;
    var myDictionary2 = new Dictionary<int, int>();

    foreach (var item in Model.ChiTietKetQuas)
    {
        myDictionary[item.CauHoi.MaCauHoi] = counter;
        counter++;
    }
    int cnt2 = 1;
    foreach (var item in groupedItems)
    {
        myDictionary2[item.Key.MaNhom ?? 0] = cnt2;
        cnt2++;
    }
    <!-- Thêm vào trong phần <head> -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

}

@*Reference the TinyMCE script*@
<!-- Place the first <script> tag in your HTML's <head> -->
<script src="~/Scripts/tinymce/tinymce.min.js" referrerpolicy="origin"></script>
<!-- Place the following <script> and <textarea> tags your HTML's <body> -->
<script>
    tinymce.init({
        selector: 'textarea',
        plugins: [
            // Core editing features
            'anchor', 'autolink', 'charmap', 'codesample', 'emoticons', 'image', 'link', 'lists', 'media', 'searchreplace', 'table', 'visualblocks', 'wordcount',
            // Your account includes a free trial of TinyMCE premium features
            // Try the most popular premium features until Nov 16, 2024:
            'checklist', 'mediaembed', 'casechange', 'export', 'formatpainter', 'pageembed', 'a11ychecker', 'tinymcespellchecker', 'permanentpen', 'powerpaste', 'advtable', 'advcode', 'editimage', 'advtemplate', 'ai', 'mentions', 'tinycomments', 'tableofcontents', 'footnotes', 'mergetags', 'autocorrect', 'typography', 'inlinecss', 'markdown',
            // Early access to document converters
            'importword', 'exportword', 'exportpdf'
        ],
        toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
        tinycomments_mode: 'embedded',
        tinycomments_author: 'Author name',
        mergetags_list: [
            { value: 'First.Name', title: 'First Name' },
            { value: 'Email', title: 'Email' },
        ],
        ai_request: (request, respondWith) => respondWith.string(() => Promise.reject('See docs to implement AI Assistant')),
        exportpdf_converter_options: { 'format': 'Letter', 'margin_top': '1in', 'margin_right': '1in', 'margin_bottom': '1in', 'margin_left': '1in' },
        exportword_converter_options: { 'document': { 'size': 'Letter' } },
        importword_converter_options: { 'formatting': { 'styles': 'inline', 'resets': 'inline', 'defaults': 'inline', } },
    });
</script>


<style>
    .selected-button {
        background-color: grey;
        color: white;
    }
    /* General modal styling */
    .modal-content {
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        overflow: hidden;
        border: none;
    }

    .modal-header {
        background-color: #f5f5f5;
        border-bottom: 1px solid #ddd;
        padding: 1rem;
    }

        .modal-header h5 {
            font-weight: bold;
            color: #333;
        }

        .modal-header .close {
            font-size: 1.5rem;
            color: #aaa;
        }

            .modal-header .close:hover {
                color: #555;
            }

    .modal-body {
        padding: 1.5rem;
        background-color: #fff;
    }

    .modal-footer {
        background-color: #f9f9f9;
        padding: 1rem;
        border-top: 1px solid #ddd;
        display: flex;
        justify-content: space-between;
    }

    /* Textarea styling */
    .modal-body textarea {
        width: 100%;
        min-height: 120px;
        border-radius: 6px;
        border: 1px solid #ddd;
        padding: 0.5rem;
        resize: vertical;
        transition: border-color 0.3s;
    }

        .modal-body textarea:focus {
            outline: none;
            border-color: #007bff;
        }

    /* Button styling */
    .modal-footer .btn {
        border-radius: 6px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: background-color 0.3s, color 0.3s;
    }

    .modal-footer .btn-secondary {
        background-color: #f1f1f1;
        color: #333;
        border: none;
    }

        .modal-footer .btn-secondary:hover {
            background-color: #ddd;
        }

    .modal-footer .btn-primary {
        background-color: #007bff;
        color: #fff;
        border: none;
    }

        .modal-footer .btn-primary:hover {
            background-color: #0056b3;
            color: #fff;
        }

    .col-lg-3 {
        background-color: #f8f9fa;
        border: 1px solid #007bff;
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin: 0.25rem;
    }

    #timer {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }

    .group-container-right {
        margin-bottom: 1rem;
    }

        .group-container-right .bg-light {
            background-color: #f8f9fa;
            padding: 0.5rem;
            border-radius: 0.25rem;
            font-weight: bold;
        }

        .group-container-right button {
            margin: 0.25rem;
            padding: 0.5rem 1rem;
            border: 1px solid #007bff;
            border-radius: 0.25rem;
            background-color: #ffffff;
            color: #007bff;
            transition: background-color 0.3s, color 0.3s;
        }

            .group-container-right button:hover {
                background-color: #007bff;
                color: #ffffff;
            }

            .group-container-right button.selected-button {
                background-color: grey;
                color: white;
            }

    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }

    .btn-success {
        color: #fff;
        background-color: #28a745;
        border-color: #28a745;
    }

        .btn-success:hover {
            color: #fff;
            background-color: #218838;
            border-color: #1e7e34;
        }

    .bg-info {
        background-color: white !important;
    }
    .report-error-container {
        position: relative;
        display: inline-block;
        margin-top: 10px;
    }

    .report-icon {
        font-size: 24px; /* Kích thước của icon */
        cursor: pointer;
    }

        .report-icon:hover {
            color: #dc3545; /* Màu khi hover */
        }

</style>

<div class="container">
    <div class="row">
        <!-- Parent Div -->
        <form id="examForm" action="/Contests/Result?MaDe=@ViewBag.MaDe" method="post">
            <input type="hidden" name="flag" id="flag" value="0" />
            <input type="hidden" name="url" id="url" />
            <input type="hidden" id="endTime" value="@endTime" />
            <input type="hidden" id="maDe" value="@ViewBag.MaDe" />

            <div class="col-12 d-lg-flex flex-lg-row flex-column">
                <div class="col-lg-9 col-12">
                    <!-- Group Buttons -->
                    <div>
                        @foreach (var group in groupedItems)
                        {
                            <button type="button" class="btn btn-light" onclick="showGroup('@group.Key.MaNhom')">
                                Phần thi @myDictionary2[group.Key.MaNhom?? 0]
                            </button>
                        }
                    </div>

                    @functions {
                        // Helper method to shuffle a list
                        public static List<T> ShuffleList<T>(List<T> list)
                        {
                            Random rng = new Random();
                            int n = list.Count;
                            while (n > 1)
                            {
                                n--;
                                int k = rng.Next(n + 1);
                                T value = list[k];
                                list[k] = list[n];
                                list[n] = value;
                            }
                            return list;
                        }
                    }

                    <!-- Grouped Questions -->
                    @foreach (var group in groupedItems)
                    {
                        <div class="group-container" id="group-container-@group.Key.MaNhom" style="display: @(isFirst ? "block" : "none");">
                            <div class="bg-light"> @Html.Raw(HttpUtility.HtmlDecode(@group.Key.NoiDung)) </div>
                            @foreach (var item in group)
                            {
                                // Create a list of answer choices
                                var choices = new List<(string Value, string Text)>
                                                                                {
                                    ("A", item.CauHoi.DapAnA),
                                    ("B", item.CauHoi.DapAnB),
                                    ("C", item.CauHoi.DapAnC),
                                    ("D", item.CauHoi.DapAnD)
                                };

                                // Shuffle the choices
                                choices = ShuffleList(choices);

                                <div class="item-container border p-3 mb-3">
                                    <div class="field mb-2">
                                        @myDictionary[item.MaCauHoi] : @Html.Raw(HttpUtility.HtmlDecode(item.CauHoi.NoiDung))
                                    </div>

                                    <!-- Render shuffled answer choices with radio buttons -->
                                    @foreach (var choice in choices)
                                    {
                                        <label class="form-check-label bg-info w-100 my-1 border-danger border-2"
                                               for=@($"dapAn{choice.Value}_{item.MaCauHoi}")>
                                            <span class="form-check mb-2">
                                                @if (item.CauHoi.DapAnChinhXac.Length == 1)
                                                {
                                                    <input class="form-check-input"
                                                           type="radio" name="answer_@item.MaCauHoi" id=@($"dapAn{choice.Value}_{item.MaCauHoi}") value="@choice.Value"
                                                           @(item.DapAnChon == choice.Value ? "checked" : "") onchange="updateButtonColor('@item.MaCauHoi')">
                                                }
                                                else
                                                {
                                                    <input class="form-check-input"
                                                           type="checkbox" name="answer_@item.MaCauHoi" id=@($"dapAn{choice.Value}_{item.MaCauHoi}") value="@choice.Value"
                                                           @(item.DapAnChon.Contains(choice.Value) ? "checked" : "") onchange="updateButtonColor('@item.MaCauHoi')">
                                                }
                                                <span class="custom-radio"></span>
                                                @choice.Text
                                            </span>
                                        </label>
                                    }


                                    <!-- Report Error Icon -->
                                    <div class="report-error-container">
                                        <i class="fa fa-exclamation-circle text-danger report-icon"
                                           title="Report Error"
                                           onclick="openReportModal(@item.MaCauHoi); return false;">
                                        </i>
                                    </div>

                                    <!-- Error Report Modal -->
                                    <div class="modal fade" id="reportModal-@item.MaCauHoi" tabindex="-1" role="dialog">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Report Error for Question @myDictionary[item.MaCauHoi]</h5>
                                                </div>
                                                <div class="modal-body">
                                                    <textarea id="errorMessage-@item.MaCauHoi" class="tinymce form-control" placeholder="Describe the error..."></textarea>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" onclick="closeReportModal(@item.MaCauHoi)">Close</button>
                                                    <button type="button" class="btn btn-primary" onclick="submitErrorReport(@made, @item.MaCauHoi)">Submit Report</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>


                                </div>
                            }
                        </div>
                        isFirst = false;
                    }
                </div>

                <!-- Timer and Submit Button -->
                <div class="col-lg-3 col-12 bg-light border border-primary rounded-3 p-4 mx-1">
                    <input onclick="ketthuc()" type="submit" value="Nộp bài"
                           class="btn-sm btn-success" />
                    <div id="timer"></div>
                    @foreach (var group in groupedItems)
                    {
                        <div class="group-container-right">
                            <div class="bg-light">Phần thi  @myDictionary2[group.Key.MaNhom ?? 0]</div>
                            @foreach (var item in group)
                            {
                                <button name="@item.MaCauHoi" class="m-1 btn-success" id="button-@item.MaCauHoi" onclick="showQuestion('@item.MaCauHoi')">
                                    @myDictionary[item.MaCauHoi]
                                </button>
                            }
                        </div>
                    }
                </div>

            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        initializeButtonColors();
        startTimer();
    });

    function showGroup(maNhom) {
        var groupContainers = document.querySelectorAll('.group-container');
        groupContainers.forEach(function (container) {
            container.style.display = 'none';
        });

        var selectedContainer = document.getElementById('group-container-' + maNhom);
        if (selectedContainer) {
            selectedContainer.style.display = 'block';
        }
    }

    function showQuestion(maCauHoi) {
        var questionElement = document.querySelector(`input[name="answer_${maCauHoi}"]`);
        if (questionElement) {
            var groupContainer = questionElement.closest('.group-container');
            if (groupContainer) {
                var groupContainers = document.querySelectorAll('.group-container');
                groupContainers.forEach(function (container) {
                    container.style.display = 'none';
                });
                groupContainer.style.display = 'block';
            }
            questionElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            questionElement.focus();
        }
    }

    function updateButtonColor(maCauHoi) {
        var buttons = document.querySelectorAll('.group-container-right button');
        buttons.forEach(function (button) {
            if (button.id === `button-${maCauHoi}`) {
                button.classList.add('selected-button');
            }
        });
    }

    function initializeButtonColors() {
        var radioButtons = document.querySelectorAll('.form-check-input');
        radioButtons.forEach(function (radioButton) {
            if (radioButton.checked) {
                updateButtonColor(radioButton.name.split('_')[1]);
            }
        });
    }

    let endTime = new Date(document.getElementById('endTime').value).getTime();
    var interval;
    function startTimer() {
        const timerDiv = document.getElementById('timer');

        interval = setInterval(() => {
            let now = new Date().getTime();
            let distance = endTime - now;

            if (distance <= 0) {
                clearInterval(interval);
                timerDiv.textContent = "00:00";
                ketthuc();
                return;
            }// Hàm đếm ngược
            function startTimer(duration, display) {
                let timer = duration, minutes, seconds;
                setInterval(function () {
                    minutes = Math.floor(timer / 60);
                    seconds = timer % 60;

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;

                    display.textContent = minutes + ":" + seconds;

                    if (--timer < 0) {
                        // Hết thời gian
                        timer = 0;
                        alert("Hết thời gian! Bài thi sẽ được tự động nộp.");
                        ketthuc(); // Gọi hàm nộp bài khi hết thời gian
                    }
                }, 1000);
            }

            // Khi tài liệu sẵn sàng
            document.addEventListener("DOMContentLoaded", function () {
                const timerElement = document.getElementById("timer");
                const duration = 90 * 60; // 90 phút
                startTimer(duration, timerElement);
            });

            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);
            timerDiv.textContent = `Thời gian còn lại: ${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }, 1000);
    }

    function ketthuc() {
        if (confirm("Bạn có chắc chắn muốn nộp bài?")) {
            document.getElementById("examForm").submit();
        }
    }

    function openReportModal(maCauHoi) {
        $(`#reportModal-${maCauHoi}`).modal('show');
    }

    function submitErrorReport(MaDe, MaCauHoi) {
        // Get the HTML content from TinyMCE
        var errorMessageHtml = tinymce.get(`errorMessage-${MaCauHoi}`).getContent();

        // Create a temporary element to parse the HTML and extract text
        var tempElement = document.createElement('div');
        tempElement.innerHTML = errorMessageHtml;
        var errorMessageText = tempElement.textContent || tempElement.innerText || '';

        MaDe = parseInt(MaDe);
        MaCauHoi = parseInt(MaCauHoi);
        if (!errorMessageText) {
            alert(`Vui lòng nhập nội dung báo lỗi.${errorMessageText}`);
            return;
        }
        //console.log(errorMessageText)
        console.log(MaDe, MaCauHoi, errorMessageText);
        $.ajax({
            type: "POST",
            url: "/Contests/ReportError",
            data: {
                MaDe: MaDe,
                MaCauHoi: MaCauHoi,
                ErrorMessage: errorMessageText // Use the plain text here
            },
            success: function (response) {
                if (response.success) {
                    alert(response.message);
                    $(`#reportModal-${MaCauHoi}`).modal('hide');
                } else {
                    alert(response.message);
                    console.log(response);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.log("Status: " + textStatus);
                console.log("Error: " + errorThrown);
                console.log("Response: " + jqXHR.responseText);
                alert("Đã xảy ra lỗi khi gửi báo lỗi.");
            }
        });
    }

    function closeReportModal(maCauHoi) {
        $(`#reportModal-${maCauHoi}`).modal('hide');
    }

</script>
